/*
 * RCC.c
 *
 *  Created on: Feb 7, 2024
 *      Author: Nada
 */

#include "RCC.h"

Registers_t *RCC_Regs = RCC_BASEADD;

u8 RCC_SelectSysClk (RCC_Clock_t Clock)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_CFGR;

	switch (Clock)
	{
		case Clock_HSI:
			Loc_CopyReg &= RCC_CFGR_SW_CLR;
			Loc_CopyReg |= RCC_CFGR_SW_HSI;
			break;
		case Clock_HSE:
			Loc_CopyReg &= RCC_CFGR_SW_CLR;
			Loc_CopyReg |= RCC_CFGR_SW_HSE;
			break;
		case Clock_PLL:
			Loc_CopyReg &= RCC_CFGR_SW_CLR;
			Loc_CopyReg |= RCC_CFGR_SW_PLL;
			break;
		default:
			ErrorStatus = WrongChoice;
			break;
	}

	RCC_Regs->RCC_CFGR = Loc_CopyReg;

	return ErrorStatus;
}

u8 RCC_GetSysClk (void)
{
	u32 Loc_CopyReg = RCC_Regs->RCC_CFGR;

	//Reading Bit2 and Bit3 together

	return (((Loc_CopyReg)&RCC_CFGR_SWS)>>RCC_CFGR_SWS_SHIFTING);
}

u8 RCC_EnableClk (RCC_Clock_t Clock)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_CR;

	switch (Clock)
	{
		case Clock_HSI:
			Loc_CopyReg |= RCC_CR_HSI;
			break;
		case Clock_HSE:
			Loc_CopyReg |= RCC_CR_HSE;
			break;
		case Clock_PLL:
			Loc_CopyReg |= RCC_CR_PLL;
			break;
		default:
			ErrorStatus = WrongChoice;
			break;
	}

	RCC_Regs->RCC_CR = Loc_CopyReg;

	return ErrorStatus;
}

u8 RCC_DisableClk (RCC_Clock_t Clock)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_CR;

	switch (Clock)
	{
		case Clock_HSI:
			Loc_CopyReg &= ~RCC_CR_HSI;
			break;
		case Clock_HSE:
			Loc_CopyReg &= ~RCC_CR_HSE;
			break;
		case Clock_PLL:
			Loc_CopyReg &= ~RCC_CR_PLL;
			break;
		default:
			ErrorStatus = WrongChoice;
			break;
	}

	RCC_Regs->RCC_CR = Loc_CopyReg;

	return ErrorStatus;
}

u8 RCC_CheckClkStatus (RCC_Clock_t Clock, RCC_Status_t *ClockStatus)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_CR;

	switch (Clock)
	{
		case Clock_HSI:
			if (((Loc_CopyReg)>>HSIRDY_BIT)&1)
			{
				*ClockStatus = Ready;
			}
			else
			{
				*ClockStatus = NotReady;
			}
			break;
		case Clock_HSE:
			if (((Loc_CopyReg)>>HSERDY_BIT)&1)
			{
				*ClockStatus = Ready;
			}
			else
			{
				*ClockStatus = NotReady;
			}
			break;
		case Clock_PLL:
			if (((Loc_CopyReg)>>PLLRDY_BIT)&1)
			{
				*ClockStatus = Ready;
			}
			else
			{
				*ClockStatus = NotReady;
			}
			break;
		default:
			ErrorStatus = WrongChoice;
			break;
	}

	return ErrorStatus;
}

u8 RCC_SetPLLSource (RCC_Clock_t Clock)
{
	u8 ErrorStatus = Ok;

	switch (Clock)
	{
		case Clock_HSI:
			RCC_Regs->RCC_PLLCFGR &= ~RCC_PLLCFGR_SRC;
			break;
		case Clock_HSE:
			RCC_Regs->RCC_PLLCFGR |= RCC_PLLCFGR_SRC;
			break;
		default:
			ErrorStatus = WrongChoice;
			break;
	}

	return ErrorStatus;
}

u8 RCC_GetPLLSource (void)
{
	u32 Loc_CopyReg = RCC_Regs->RCC_PLLCFGR;

	//Reading Bit22

	return (((Loc_CopyReg)&RCC_PLLCFGR_SRC)>>RCC_PLLCFGR_SRC_SHIFTING);
}

