/*
 * RCC.c
 *
 *  Created on: Feb 7, 2024
 *      Author: Nada
 */

/*#include "RCC.h"

Registers_t *RCC_Regs = (Registers_t*)RCC_BASEADD;

u8 RCC_SelectSysClk (RCC_Clock_t Clock)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_CFGR;

	switch (Clock)
	{
		case Clock_HSI:
			Loc_CopyReg &= RCC_CFGR_SW_CLR;
			Loc_CopyReg |= RCC_CFGR_SW_HSI;
			break;
		case Clock_HSE:
			Loc_CopyReg &= RCC_CFGR_SW_CLR;
			Loc_CopyReg |= RCC_CFGR_SW_HSE;
			break;
		case Clock_PLL:
			Loc_CopyReg &= RCC_CFGR_SW_CLR;
			Loc_CopyReg |= RCC_CFGR_SW_PLL;
			break;
		default:
			ErrorStatus = WrongChoice;
			break;
	}

	RCC_Regs->RCC_CFGR = Loc_CopyReg;

	return ErrorStatus;
}

u8 RCC_GetSysClk (void)
{
	u32 Loc_CopyReg = RCC_Regs->RCC_CFGR;

	//Reading Bit2 and Bit3 together

	return (((Loc_CopyReg)&RCC_CFGR_SWS)>>RCC_CFGR_SWS_SHIFTING);
}

u8 RCC_EnableClk (RCC_Clock_t Clock)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_CR;

	switch (Clock)
	{
		case Clock_HSI:
			Loc_CopyReg |= RCC_CR_HSI;
			break;
		case Clock_HSE:
			Loc_CopyReg |= RCC_CR_HSE;
			break;
		case Clock_PLL:
			Loc_CopyReg |= RCC_CR_PLL;
			break;
		default:
			ErrorStatus = WrongChoice;
			break;
	}

	RCC_Regs->RCC_CR = Loc_CopyReg;

	return ErrorStatus;
}

u8 RCC_DisableClk (RCC_Clock_t Clock)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_CR;

	switch (Clock)
	{
		case Clock_HSI:
			Loc_CopyReg &= ~RCC_CR_HSI;
			break;
		case Clock_HSE:
			Loc_CopyReg &= ~RCC_CR_HSE;
			break;
		case Clock_PLL:
			Loc_CopyReg &= ~RCC_CR_PLL;
			break;
		default:
			ErrorStatus = WrongChoice;
			break;
	}

	RCC_Regs->RCC_CR = Loc_CopyReg;

	return ErrorStatus;
}

u8 RCC_CheckClkStatus (RCC_Clock_t Clock, RCC_Status_t *ClockStatus)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_CR;

	switch (Clock)
	{
		case Clock_HSI:
			if (((Loc_CopyReg)>>HSIRDY_BIT)&1)
			{
				*ClockStatus = Ready;
			}
			else
			{
				*ClockStatus = NotReady;
			}
			break;
		case Clock_HSE:
			if (((Loc_CopyReg)>>HSERDY_BIT)&1)
			{
				*ClockStatus = Ready;
			}
			else
			{
				*ClockStatus = NotReady;
			}
			break;
		case Clock_PLL:
			if (((Loc_CopyReg)>>PLLRDY_BIT)&1)
			{
				*ClockStatus = Ready;
			}
			else
			{
				*ClockStatus = NotReady;
			}
			break;
		default:
			ErrorStatus = WrongChoice;
			break;
	}

	return ErrorStatus;
}

u8 RCC_SetPLLSource (RCC_Clock_t Clock)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_PLLCFGR;

	switch (Clock)
	{
		case Clock_HSI:
			Loc_CopyReg &= ~RCC_PLLCFGR_SRC;
			break;
		case Clock_HSE:
			Loc_CopyReg |= RCC_PLLCFGR_SRC;
			break;
		default:
			ErrorStatus = WrongChoice;
			break;
	}

	RCC_Regs->RCC_PLLCFGR = Loc_CopyReg;

	return ErrorStatus;
}

u8 RCC_GetPLLSource (void)
{
	u32 Loc_CopyReg = RCC_Regs->RCC_PLLCFGR;

	//Reading Bit22

	return (((Loc_CopyReg)&RCC_PLLCFGR_SRC)>>RCC_PLLCFGR_SRC_SHIFTING);
}

u8 RCC_ConfigPLL (u32 M, u32 N, u32 P, u32 Q)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_PLLCFGR;

	if (M > RCC_PLLCFGR_M_MAX || M < RCC_PLLCFGR_M_MIN)
		ErrorStatus = NotOk;

	if (N > RCC_PLLCFGR_N_MAX || N < RCC_PLLCFGR_N_MIN)
		ErrorStatus = NotOk;

	if (Q > RCC_PLLCFGR_Q_MAX || Q < RCC_PLLCFGR_Q_MIN)
		ErrorStatus = NotOk;

	switch (P)
	{
		case RCC_PLLCFGR_P_2:
			P = RCC_PLLCFGR_P_VALUE2;
			break;
		case RCC_PLLCFGR_P_4:
			P = RCC_PLLCFGR_P_VALUE4;
			break;
		case RCC_PLLCFGR_P_6:
			P = RCC_PLLCFGR_P_VALUE6;
			break;
		case RCC_PLLCFGR_P_8:
			P = RCC_PLLCFGR_P_VALUE8;
			break;
		default:
			ErrorStatus = NotOk;
			break;
	}

	u32 Fpll = 0, Fusb = 0;

	switch (RCC_GetPLLSource())
	{
		case Clock_HSI:
			Fpll = HSI_FREQUENCY*N/(M*P);  // 16*48/(4*3)
			Fusb = HSI_FREQUENCY*N/(M*Q);  // 16*48/(4*4)
			break;
		case Clock_HSE:
			Fpll = HSE_FREQUENCY*N/(M*P);
			Fusb = HSE_FREQUENCY*N/(M*Q);
			break;
		default:
			break;
	}


	if (ErrorStatus==Ok && Fpll <= 84 && Fusb == 48)
	{
		Loc_CopyReg &= RCC_PLLCFGR_M_CLR;
		Loc_CopyReg |= M;
		Loc_CopyReg &= RCC_PLLCFGR_N_CLR;
		Loc_CopyReg |= (N<<RCC_PLLCFGR_N_SHIFTING);
		Loc_CopyReg &= RCC_PLLCFGR_P_CLR;
		Loc_CopyReg |= (P<<RCC_PLLCFGR_P_SHIFTING);
		Loc_CopyReg &= RCC_PLLCFGR_Q_CLR;
		Loc_CopyReg |= (Q<<RCC_PLLCFGR_Q_SHIFTING);
	}

	RCC_Regs->RCC_PLLCFGR = Loc_CopyReg;

	return ErrorStatus;
}

u8 RCC_EnableAHB1Peri(AHB1ENR_Peri_t AHB1_Peri)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_AHB1ENR;

	switch (AHB1_Peri)
	{
		case AHB1ENR_GPIOAEN:
			Loc_CopyReg |= RCC_AHB1ENR_GPIOAEN;
			break;

		case AHB1ENR_GPIOBEN:
			Loc_CopyReg |= RCC_AHB1ENR_GPIOBEN;
			break;

		case AHB1ENR_GPIOCEN:
			Loc_CopyReg |= RCC_AHB1ENR_GPIOCEN;
			break;

		case AHB1ENR_GPIODEN:
			Loc_CopyReg |= RCC_AHB1ENR_GPIODEN;
			break;

		case AHB1ENR_GPIOEEN:
			Loc_CopyReg |= RCC_AHB1ENR_GPIOEEN;
			break;

		case AHB1ENR_GPIOHEN:
			Loc_CopyReg |= RCC_AHB1ENR_GPIOHEN;
			break;

		case AHB1ENR_CRCEN:
			Loc_CopyReg |= RCC_AHB1ENR_CRCEN;
			break;

		case AHB1ENR_DMA1EN:
			Loc_CopyReg |= RCC_AHB1ENR_DMA1EN;
			break;

		case AHB1ENR_DMA2EN:
			Loc_CopyReg |= RCC_AHB1ENR_DMA2EN;
			break;

		default:
			ErrorStatus = WrongChoice;
			break;
	}

	RCC_Regs->RCC_AHB1ENR = Loc_CopyReg;

	return ErrorStatus;
}

u8 RCC_EnableAHB2Peri(AHB2ENR_Peri_t AHB2_Peri)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_AHB2ENR;

	if (AHB2_Peri == AHB2ENR_OTGFSEN)
		Loc_CopyReg |= RCC_AHB2ENR_OTGFSEN;
	else
		ErrorStatus = WrongChoice;

	RCC_Regs->RCC_AHB2ENR = Loc_CopyReg;

	return ErrorStatus;
}

u8 RCC_EnableAPB1Peri(APB1ENR_Peri_t APB1_Peri)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_APB1ENR;

	switch (APB1_Peri)
	{
		case APB1ENR_TIM2EN:
			Loc_CopyReg |= RCC_APB1ENR_TIM2EN;
			break;

		case APB1ENR_TIM3EN:
			Loc_CopyReg |= RCC_APB1ENR_TIM3EN;
			break;

		case APB1ENR_TIM4EN:
			Loc_CopyReg |= RCC_APB1ENR_TIM4EN;
			break;

		case APB1ENR_TIM5EN:
			Loc_CopyReg |= RCC_APB1ENR_TIM5EN;
			break;

		case APB1ENR_WWDGEN:
			Loc_CopyReg |= RCC_APB1ENR_WWDGEN;
			break;

		case APB1ENR_SPI2EN:
			Loc_CopyReg |= RCC_APB1ENR_SPI2EN;
			break;

		case APB1ENR_SPI3EN:
			Loc_CopyReg |= RCC_APB1ENR_SPI3EN;
			break;

		case APB1ENR_USART2EN:
			Loc_CopyReg |= RCC_APB1ENR_USART2EN;
			break;

		case APB1ENR_I2C1EN:
			Loc_CopyReg |= RCC_APB1ENR_I2C1EN;
			break;

		case APB1ENR_I2C2EN:
			Loc_CopyReg |= RCC_APB1ENR_I2C2EN;
			break;

		case APB1ENR_I2C3EN:
			Loc_CopyReg |= RCC_APB1ENR_I2C3EN;
			break;

		case APB1ENR_PWREN:
			Loc_CopyReg |= RCC_APB1ENR_PWREN;
			break;

		default:
			ErrorStatus = WrongChoice;
			break;
	}

	RCC_Regs->RCC_APB1ENR = Loc_CopyReg;

	return ErrorStatus;
}

u8 RCC_EnableAPB2Peri(APB2ENR_Peri_t APB2_Peri)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_APB2ENR;

	switch (APB2_Peri)
	{
		case APB2ENR_TIM1EN:
			Loc_CopyReg |= RCC_APB2ENR_TIM1EN;
			break;

		case APB2ENR_USART1EN:
			Loc_CopyReg |= RCC_APB2ENR_USART1EN;
			break;

		case APB2ENR_USART6EN:
			Loc_CopyReg |= APB2ENR_USART6EN;
			break;

		case APB2ENR_ADC1EN:
			Loc_CopyReg |= RCC_APB2ENR_ADC1EN;
			break;

		case APB2ENR_SDIOEN:
			Loc_CopyReg |= RCC_APB2ENR_SDIOEN;
			break;

		case APB2ENR_SPI1EN:
			Loc_CopyReg |= RCC_APB2ENR_SPI1EN;
			break;

		case APB2ENR_SPI4EN:
			Loc_CopyReg |= RCC_APB2ENR_SPI4EN;
			break;

		case APB2ENR_SYSCFGEN:
			Loc_CopyReg |= RCC_APB2ENR_SYSCFGEN;
			break;

		case APB2ENR_TIM9EN:
			Loc_CopyReg |= RCC_APB2ENR_TIM9EN;
			break;

		case APB2ENR_TIM10EN:
			Loc_CopyReg |= RCC_APB2ENR_TIM10EN;
			break;

		case APB2ENR_TIM11EN:
			Loc_CopyReg |= RCC_APB2ENR_TIM11EN;
			break;

		default:
			ErrorStatus = WrongChoice;
			break;
	}

	RCC_Regs->RCC_APB2ENR = Loc_CopyReg;

	return ErrorStatus;
}

u8 RCC_DisableAHB1Peri(AHB1ENR_Peri_t AHB1_Peri)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_AHB1ENR;

	switch (AHB1_Peri)
	{
		case AHB1ENR_GPIOAEN:
			Loc_CopyReg &= ~RCC_AHB1ENR_GPIOAEN;
			break;

		case AHB1ENR_GPIOBEN:
			Loc_CopyReg &= ~RCC_AHB1ENR_GPIOBEN;
			break;

		case AHB1ENR_GPIOCEN:
			Loc_CopyReg &= ~RCC_AHB1ENR_GPIOCEN;
			break;

		case AHB1ENR_GPIODEN:
			Loc_CopyReg &= ~RCC_AHB1ENR_GPIODEN;
			break;

		case AHB1ENR_GPIOEEN:
			Loc_CopyReg &= ~RCC_AHB1ENR_GPIOEEN;
			break;

		case AHB1ENR_GPIOHEN:
			Loc_CopyReg &= ~RCC_AHB1ENR_GPIOHEN;
			break;

		case AHB1ENR_CRCEN:
			Loc_CopyReg &= ~RCC_AHB1ENR_CRCEN;
			break;

		case AHB1ENR_DMA1EN:
			Loc_CopyReg &= ~RCC_AHB1ENR_DMA1EN;
			break;

		case AHB1ENR_DMA2EN:
			Loc_CopyReg &= ~RCC_AHB1ENR_DMA2EN;
			break;

		default:
			ErrorStatus = WrongChoice;
			break;
	}

	RCC_Regs->RCC_AHB1ENR = Loc_CopyReg;

	return ErrorStatus;
}

u8 RCC_DisableAHB2Peri(AHB2ENR_Peri_t AHB2_Peri)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_AHB2ENR;

	if (AHB2_Peri == AHB2ENR_OTGFSEN)
		Loc_CopyReg &= ~RCC_AHB2ENR_OTGFSEN;
	else
		ErrorStatus = WrongChoice;

	RCC_Regs->RCC_AHB2ENR = Loc_CopyReg;

	return ErrorStatus;
}

u8 RCC_DisableAPB1Peri(APB1ENR_Peri_t APB1_Peri)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_APB1ENR;

	switch (APB1_Peri)
	{
		case APB1ENR_TIM2EN:
			Loc_CopyReg &= ~RCC_APB1ENR_TIM2EN;
			break;

		case APB1ENR_TIM3EN:
			Loc_CopyReg &= ~RCC_APB1ENR_TIM3EN;
			break;

		case APB1ENR_TIM4EN:
			Loc_CopyReg &= ~RCC_APB1ENR_TIM4EN;
			break;

		case APB1ENR_TIM5EN:
			Loc_CopyReg &= ~RCC_APB1ENR_TIM5EN;
			break;

		case APB1ENR_WWDGEN:
			Loc_CopyReg &= ~RCC_APB1ENR_WWDGEN;
			break;

		case APB1ENR_SPI2EN:
			Loc_CopyReg &= ~RCC_APB1ENR_SPI2EN;
			break;

		case APB1ENR_SPI3EN:
			Loc_CopyReg &= ~RCC_APB1ENR_SPI3EN;
			break;

		case APB1ENR_USART2EN:
			Loc_CopyReg &= ~RCC_APB1ENR_USART2EN;
			break;

		case APB1ENR_I2C1EN:
			Loc_CopyReg &= ~RCC_APB1ENR_I2C1EN;
			break;

		case APB1ENR_I2C2EN:
			Loc_CopyReg &= ~RCC_APB1ENR_I2C2EN;
			break;

		case APB1ENR_I2C3EN:
			Loc_CopyReg &= ~RCC_APB1ENR_I2C3EN;
			break;

		case APB1ENR_PWREN:
			Loc_CopyReg &= ~RCC_APB1ENR_PWREN;
			break;

		default:
			ErrorStatus = WrongChoice;
			break;
	}

	RCC_Regs->RCC_APB1ENR = Loc_CopyReg;

	return ErrorStatus;
}

u8 RCC_DisableAPB2Peri(APB2ENR_Peri_t APB2_Peri)
{
	u8 ErrorStatus = Ok;

	u32 Loc_CopyReg = RCC_Regs->RCC_APB2ENR;

	switch (APB2_Peri)
	{
		case APB2ENR_TIM1EN:
			Loc_CopyReg &= ~RCC_APB2ENR_TIM1EN;
			break;

		case APB2ENR_USART1EN:
			Loc_CopyReg &= ~RCC_APB2ENR_USART1EN;
			break;

		case APB2ENR_USART6EN:
			Loc_CopyReg &= ~RCC_APB2ENR_USART6EN;
			break;

		case APB2ENR_ADC1EN:
			Loc_CopyReg &= ~RCC_APB2ENR_ADC1EN;
			break;

		case APB2ENR_SDIOEN:
			Loc_CopyReg &= ~RCC_APB2ENR_SDIOEN;
			break;

		case APB2ENR_SPI1EN:
			Loc_CopyReg &= ~RCC_APB2ENR_SPI1EN;
			break;

		case APB2ENR_SPI4EN:
			Loc_CopyReg &= ~RCC_APB2ENR_SPI4EN;
			break;

		case APB2ENR_SYSCFGEN:
			Loc_CopyReg &= ~RCC_APB2ENR_SYSCFGEN;
			break;

		case APB2ENR_TIM9EN:
			Loc_CopyReg &= ~RCC_APB2ENR_TIM9EN;
			break;

		case APB2ENR_TIM10EN:
			Loc_CopyReg &= ~RCC_APB2ENR_TIM10EN;
			break;

		case APB2ENR_TIM11EN:
			Loc_CopyReg &= ~RCC_APB2ENR_TIM11EN;
			break;

		default:
			ErrorStatus = WrongChoice;
			break;
	}

	RCC_Regs->RCC_APB2ENR = Loc_CopyReg;

	return ErrorStatus;
}*/

/*
 * RCC.c
 *
 *  Created on: Feb 15, 2024
 *      Author: HEBA
 */

#include <RCC.h>


#define RCC_BASE_ADDRESS         0x40023800
#define RCC_HSE_RDY              0x00020000
#define RCC_HSI_RDY              0x00000002
#define RCC_PLL_RDY              0x02000000
#define SYSCLOCK_MASK            0x00000003
#define RCC_PLL_M_PRESCALE_MASK  0x0000003F
#define RCC_PLL_N_PRESCALE_MASK	 0x00007FC0
#define RCC_PLL_P_PRESCALE_MASK  0x00030000
#define RCC_PLL_Q_PRESCALE_MASK  0x0F000000
#define AHB_PRESCALER_MASK       0x000000F0
#define APB1_PRESCALER_MASK      0x00001C00
#define APB2_PRESCALER_MASK      0x0000E000
#define RCC_PLLN                 6
#define RCC_PLLM                 0
#define RCC_PLLP                 16
#define RCC_PLLQ                 24

typedef struct{
	volatile u32 RCC_CR;
	volatile u32 RCC_PLLCFGR;
	volatile u32 RCC_CFGR;
	volatile u32 RCC_CIR;
	volatile u32 RCC_AHB1RSTR;
	volatile u32 RCC_AHB2RSTR;
	volatile u32 RESERVED;
	volatile u32 RESERVED2;
	volatile u32 RCC_APB1RSTR;
	volatile u32 RCC_APB2RSTR;
	volatile u32 RESERVED3;
	volatile u32 RESERVED4;
	volatile u32 RCC_AHB1ENR;
	volatile u32 RCC_AHB2ENR;
	volatile u32 RESERVED5;
	volatile u32 RESERVED6;
	volatile u32 RCC_APB1ENR;
	volatile u32 RCC_APB2ENR;
	volatile u32 RESERVED7;
	volatile u32 RESERVED8;
	volatile u32 RCC_AHB1LPENR;
	volatile u32 RCC_AHB2LPENR;
	volatile u32 RESERVED9;
	volatile u32 RESERVED10;
	volatile u32 RCC_APB1LPENR;
	volatile u32 RCC_APB2LPENR;
	volatile u32 RESERVED11;
	volatile u32 RESERVED12;
	volatile u32 RCC_BDCR;
	volatile u32 RCC_CSR;
	volatile u32 RESERVED13;
	volatile u32 RESERVED14;
	volatile u32 RCC_SSCGR;
	volatile u32 RCC_PLLI2SCFGR;
	volatile u32 RESERVED15;
	volatile u32 RCC_DCKCFGR;
}RCC_PERI_t;


volatile RCC_PERI_t *const RCC =(RCC_PERI_t*)RCC_BASE_ADDRESS ;





RCC_enuErrorStatus_t RCC_Clock_ON (u32 RCC_clock )
{
	RCC_enuErrorStatus_t loc_RCC_ErrorStatus = RCC_enuNOK;

	if(RCC_clock!=RCC_HSE_CRYSTAL && RCC_clock!=RCC_HSE_RC && RCC_clock!=RCC_HSI && RCC_clock!= RCC_PLL)
	{
		loc_RCC_ErrorStatus = RCC_enuInvalidConfigurationForClock ;
	}
	else
	{
		loc_RCC_ErrorStatus = RCC_enuOK ;
		u32 time_out = 10000 ;
		RCC->RCC_CR |= RCC_clock ;

		switch (RCC_clock)
		{
		case RCC_HSE_CRYSTAL :

			while ((RCC->RCC_CR & RCC_HSE_RDY )&& time_out)
			{
				time_out -- ;
			}
			break ;
		case RCC_HSE_RC :

			while ((RCC->RCC_CR & RCC_HSE_RDY ) && time_out)
			{
				time_out -- ;
			}
			break ;
		case RCC_HSI :

			while ((RCC->RCC_CR & RCC_HSI_RDY )&& time_out)
			{
				time_out -- ;
			}
			break ;
		case RCC_PLL :

			while ((RCC->RCC_CR & RCC_PLL_RDY )&& time_out)
			{
				time_out -- ;
			}
			break ;
		default :
			loc_RCC_ErrorStatus = RCC_enuClockNotReady ;
			break ;
		}

	}
	return loc_RCC_ErrorStatus ;
}



RCC_enuErrorStatus_t RCC_Clock_OFF (u32 RCC_clock )
{
	RCC_enuErrorStatus_t loc_RCC_ErrorStatus = RCC_enuNOK;
	if(RCC_clock!=RCC_HSE_CRYSTAL && RCC_clock!=RCC_HSE_RC && RCC_clock!=RCC_HSI && RCC_clock!= RCC_PLL)
	{
		loc_RCC_ErrorStatus = RCC_enuInvalidConfigurationForClock ;
	}
	else
	{
		loc_RCC_ErrorStatus = RCC_enuOK ;
		RCC->RCC_CR &=~ RCC_clock ;
	}
	return loc_RCC_ErrorStatus ;
}




RCC_enuErrorStatus_t RCC_SelectClock (u32 system_clock )
{
	RCC_enuErrorStatus_t loc_RCC_ErrorStatus = RCC_enuNOK;
	u32 Temp ;

	if (system_clock != RCC_SYSCLK_HSE && system_clock!= RCC_SYSCLK_HSI &&system_clock != RCC_SYSCLK_PLL)
	{
		loc_RCC_ErrorStatus = RCC_enuNOK;
	}
	else
	{
		loc_RCC_ErrorStatus = RCC_enuOK ;

		Temp=RCC->RCC_CFGR ;
		Temp &=~ SYSCLOCK_MASK;
		Temp |=system_clock ;
		RCC->RCC_CFGR= Temp ;

	}
	return loc_RCC_ErrorStatus ;
}



RCC_enuErrorStatus_t RCC_Select_PLLClock (u32 PLL_clock)
{
	RCC_enuErrorStatus_t loc_RCC_ErrorStatus = RCC_enuNOK;
	if(PLL_clock!=RCC_PLL_HSE && PLL_clock!= RCC_PLL_HSI)
	{
		loc_RCC_ErrorStatus = RCC_enuInvalidPLLClockOption  ;
	}
	else
	{
		loc_RCC_ErrorStatus = RCC_enuOK ;
		RCC->RCC_PLLCFGR |=PLL_clock ;
	}

	return loc_RCC_ErrorStatus ;
}

RCC_enuErrorStatus_t RCC_CFG_PLLClock (u32 PLL_NValue , u32 PLL_MValue ,u32 PLL_PValue ,u32 PLL_QValue )
{
	RCC_enuErrorStatus_t loc_RCC_ErrorStatus = RCC_enuNOK;
	u32 Temp ;
	if (PLL_NValue <192 || PLL_NValue > 432)
	{
		loc_RCC_ErrorStatus = RCC_enuInvalidConfigurationForPLL  ;
	}
	else if (PLL_MValue <2 || PLL_MValue > 63)
	{
		loc_RCC_ErrorStatus = RCC_enuInvalidConfigurationForPLL  ;
	}
	else if(PLL_PValue != 2 && PLL_PValue != 4 && PLL_PValue != 6 && PLL_PValue != 8)
	{
		loc_RCC_ErrorStatus = RCC_enuInvalidConfigurationForPLL  ;
	}
	else if(PLL_QValue < 2 || PLL_QValue > 15)
	{
		loc_RCC_ErrorStatus = RCC_enuInvalidConfigurationForPLL  ;
	}
	else
	{
		loc_RCC_ErrorStatus = RCC_enuOK ;
		Temp = RCC->RCC_PLLCFGR ;
		Temp &=~ RCC_PLL_M_PRESCALE_MASK  ;
		Temp &=~ RCC_PLL_N_PRESCALE_MASK	 ;
		Temp &=~ RCC_PLL_P_PRESCALE_MASK  ;
		Temp &=~ RCC_PLL_Q_PRESCALE_MASK   ;
		Temp |= (PLL_NValue<< RCC_PLLN) | (PLL_MValue<< RCC_PLLM ) |(PLL_PValue<< RCC_PLLP) |(PLL_QValue<< RCC_PLLQ)    ;
		RCC->RCC_PLLCFGR = Temp ;
	}
	return loc_RCC_ErrorStatus ;
}


RCC_enuErrorStatus_t RCC_EnablePeri (u32 Copy_u8Bath , u32 Copy_u8Peri  )
{
	RCC_enuErrorStatus_t loc_RCC_ErrorStatus = RCC_enuOK;
	switch (Copy_u8Bath)
	{
	case RCC_AHP1 :
		RCC-> RCC_AHB1ENR|= Copy_u8Peri;
		break ;
	case RCC_AHP2 :
		RCC-> RCC_AHB2ENR|= Copy_u8Peri ;
		break ;
	case RCC_APB1 :
		RCC-> RCC_APB1ENR|= Copy_u8Peri ;
		break ;
	case RCC_APB2 :
		RCC-> RCC_APB2ENR|= Copy_u8Peri;
		break ;
	default :
		loc_RCC_ErrorStatus = RCC_enuNOK ;
		break ;

	}
	return loc_RCC_ErrorStatus ;
}

RCC_enuErrorStatus_t RCC_DisablePeri (u32 Copy_u8Bath , u32 Copy_u8Peri  )
{
	RCC_enuErrorStatus_t loc_RCC_ErrorStatus = RCC_enuOK;
	switch (Copy_u8Bath)
	{
	case RCC_AHP1 :
		RCC-> RCC_AHB1ENR &=~ Copy_u8Peri;
		break ;
	case RCC_AHP2 :
		RCC-> RCC_AHB2ENR &=~ Copy_u8Peri ;
		break ;
	case RCC_APB1 :
		RCC-> RCC_APB1ENR &=~ Copy_u8Peri ;
		break ;
	case RCC_APB2 :
		RCC-> RCC_APB2ENR &=~ Copy_u8Peri;
		break ;
	default :
		loc_RCC_ErrorStatus = RCC_enuNOK ;
		break ;

	}
	return loc_RCC_ErrorStatus ;
}


RCC_enuErrorStatus_t CFG_RCC_AHB_PRESCALER (u32 AHB_PRESCALER )
{
	RCC_enuErrorStatus_t loc_RCC_ErrorStatus = RCC_enuNOK;
	u32 Temp ;

	if (AHB_PRESCALER != SYSTEM_CLOCK_DIVIDED_BY_2 && AHB_PRESCALER!= SYSTEM_CLOCK_DIVIDED_BY_4 &&
			AHB_PRESCALER != SYSTEM_CLOCK_DIVIDED_BY_8&&AHB_PRESCALER != SYSTEM_CLOCK_DIVIDED_BY_16&&
			AHB_PRESCALER != SYSTEM_CLOCK_DIVIDED_BY_64&&AHB_PRESCALER != SYSTEM_CLOCK_DIVIDED_BY_128&&
			AHB_PRESCALER != SYSTEM_CLOCK_DIVIDED_BY_256 && AHB_PRESCALER!= SYSTEM_CLOCK_DIVIDED_BY_512 )
	{
		loc_RCC_ErrorStatus = RCC_enuNOK;
	}
	else
	{
		loc_RCC_ErrorStatus = RCC_enuOK ;
		Temp=RCC->RCC_CFGR ;
		Temp &=~ AHB_PRESCALER_MASK;
		Temp |=AHB_PRESCALER ;
		RCC->RCC_CFGR= Temp ;
	}
	return loc_RCC_ErrorStatus ;
}




RCC_enuErrorStatus_t CFG_RCC_APB1_PRESCALER (u32 APB1_PRESCALER )
{
	RCC_enuErrorStatus_t loc_RCC_ErrorStatus = RCC_enuNOK;
	u32 Temp ;

	if (APB1_PRESCALER != PRE1_AHB_DIVIDED_BY_2 && APB1_PRESCALER!= PRE1_AHB_DIVIDED_BY_4 &&
			APB1_PRESCALER != PRE1_AHB_DIVIDED_BY_8&&APB1_PRESCALER != PRE1_AHB_DIVIDED_BY_16)
	{
		loc_RCC_ErrorStatus = RCC_enuNOK;
	}
	else
	{
		loc_RCC_ErrorStatus = RCC_enuOK ;
		Temp=RCC->RCC_CFGR ;
		Temp &=~ APB1_PRESCALER_MASK;
		Temp |=APB1_PRESCALER ;
		RCC->RCC_CFGR= Temp ;
	}
	return loc_RCC_ErrorStatus ;
}





RCC_enuErrorStatus_t CFG_RCC_APB2_PRESCALER (u32 APB2_PRESCALER )
{
	RCC_enuErrorStatus_t loc_RCC_ErrorStatus = RCC_enuNOK;
	u32 Temp ;

	if (APB2_PRESCALER != PRE2_AHB_DIVIDED_BY_2 && APB2_PRESCALER!= PRE2_AHB_DIVIDED_BY_4 &&
			APB2_PRESCALER != PRE2_AHB_DIVIDED_BY_8&&APB2_PRESCALER != PRE2_AHB_DIVIDED_BY_16)
	{
		loc_RCC_ErrorStatus = RCC_enuNOK;
	}
	else
	{
		loc_RCC_ErrorStatus = RCC_enuOK ;
		Temp=RCC->RCC_CFGR ;
		Temp &=~ APB2_PRESCALER_MASK;
		Temp |=APB2_PRESCALER ;
		RCC->RCC_CFGR= Temp ;
	}
	return loc_RCC_ErrorStatus ;
}

