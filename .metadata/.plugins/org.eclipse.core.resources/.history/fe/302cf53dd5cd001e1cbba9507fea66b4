/*
 * RCC.h
 *
 *  Created on: Feb 7, 2024
 *      Author: Nada
 */

#ifndef MCAL_RCC_H_
#define MCAL_RCC_H_

#include "../../LIB/Std_Types.h"

/*Registers base address*/
#define RCC_BASEADD				0x40023800

/* RCC Registers*/

typedef struct
{
	volatile u32 RCC_CR;
	volatile u32 RCC_PLLCFGR;
	volatile u32 RCC_CFGR;
	volatile u32 RCC_CIR;
	volatile u32 RCC_AHB1RSTR;
	volatile u32 RCC_AHB2RSTR;
	volatile u32 Reserved1;
	volatile u32 Reserved2;
	volatile u32 RCC_APB1RSTR;
	volatile u32 RCC_APB2RSTR;
	volatile u32 Reserved3;
	volatile u32 Reserved4;
	volatile u32 RCC_AHB1ENR;
	volatile u32 RCC_AHB2ENR;
	volatile u32 Reserved5;
	volatile u32 Reserved6;
	volatile u32 RCC_APB1ENR;
	volatile u32 RCC_APB2ENR;
	volatile u32 Reserved7;
	volatile u32 Reserved8;
	volatile u32 RCC_AHB1LPENR;
	volatile u32 RCC_AHB2LPENR;
	volatile u32 Reserved9;
	volatile u32 Reserved10;
	volatile u32 RCC_APB1LPENR;
	volatile u32 RCC_APB2LPENR;
	volatile u32 Reserved11;
	volatile u32 Reserved12;
	volatile u32 RCC_BDCR;
	volatile u32 RCC_CSR;
	volatile u32 Reserved13;
	volatile u32 Reserved14;
	volatile u32 RCC_SSCGR;
	volatile u32 RCC_PLLI2SCFGR;
	volatile u32 Reserved15;
	volatile u32 RCC_DCKCFGR;
}Registers_t;

/* RCC_CR masks */
#define RCC_CR_RESET			0x00000081
#define RCC_CR_HSI				0x00000001
#define RCC_CR_HSE				0x00010000
#define RCC_CR_PLL				0x01000000

#define HSIRDY_BIT				1
#define HSERDY_BIT				17
#define PLLRDY_BIT				25

/* RCC_PLLCFGR masks */

#define RCC_PLLCFGR_RESET		0x24003010
#define RCC_PLLCFGR_SRC			0x00400000

/* RCC_CFGR masks */

#define RCC_CFGR_SW_CLR			0xFFFFFFFC
#define RCC_CFGR_SW_HSI			0x00000000
#define RCC_CFGR_SW_HSE			0x00000001
#define RCC_CFGR_SW_PLL			0x00000002
#define RCC_CFGR_SW_NA			0x00000003

#define RCC_CFGR_SWS			0x0000000C


/* Clock Options */

typedef enum
{
	Clock_HSI,
	Clock_HSE,
	Clock_PLL
}RCC_Clock_t;

/* Error Possibilities */
#define Ok			0
#define NotOk		1
#define Redundant	2
#define WrongChoice	3

/* Clock status */
typedef enum
{
	NotReady,
	Ready
}RCC_Status_t;

/* On or Off */
#define OFF			0
#define ON			1


/* APIs */
u8 RCC_SelectSysClk (RCC_Clock_t Clock);
static u8 RCC_GetSysClk (void); //hanst2bl elegaba fe pointer
u8 RCC_EnableClk (RCC_Clock_t Clock);
u8 RCC_DisableClk (RCC_Clock_t Clock);
static u8 RCC_CheckClkStatus (RCC_Clock_t Clock);
u8 RCC_SetPLLSource (void);
u8 RCC_ConfigPLL (u8 );

#endif /* MCAL_RCC_H_ */
